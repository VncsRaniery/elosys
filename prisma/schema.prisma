generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?  @map("email_verified")
    image         String?
    password      String?
    accounts      Account[]
    sessions      Session[]
    linktrees     Linktree[]

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}

model Linktree {
    id                 String   @id @default(cuid())
    username           String   @unique
    displayName        String?
    avatarUrl          String?
    bio                String?
    theme              String   @default("dark")
    customColor        String   @default("#8A2BE2")
    backgroundImageUrl String?
    isPublic           Boolean  @default(true)
    userId             String   @map("user_id")
    createdAt          DateTime @default(now()) @map("created_at")
    updatedAt          DateTime @updatedAt @map("updated_at")

    user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    links Link[]

    @@map("linktrees")
}

model Link {
    id         String   @id @default(cuid())
    title      String
    url        String
    order      Int      @default(0)
    isActive   Boolean  @default(true)
    linktreeId String   @map("linktree_id")
    createdAt  DateTime @default(now()) @map("created_at")
    updatedAt  DateTime @updatedAt @map("updated_at")

    linktree Linktree @relation(fields: [linktreeId], references: [id], onDelete: Cascade)

    @@map("links")
}
